{"version":3,"sources":["components/PhoneKeyboard/keyboard-button.tsx","utils/helpers.ts","components/PhoneKeyboard/index.tsx","components/ContactList/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["KeyboardButton","value","onClick","className","number","letter","keyboardButtonData","keyboardButtonReset","keyboardButtonDelete","PhoneKeyboard","Row","Col","lg","Input","placeholder","readOnly","map","keyBtn","index","key","ContactList","data","Badge","color","length","ListGroup","item","ListGroupItem","name","phone","App","useState","keyboardValue","setKeyboardValue","contacts","setContacts","useEffect","fetch","then","response","json","catch","error","console","size","offset","keyboardButton","substring","handleKeyboardClick","keyword","regexString","i","find","charAt","regex","RegExp","filter","contact","exec","helpers","filterContacts","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.acc14211.chunk.js","sourcesContent":["import React from 'react';\n\nimport { IKeyboardButton } from \"../../types/components\";\n\nconst KeyboardButton: React.FC<IKeyboardButton> = ({ value, onClick }) => {\n  return (\n    <div className=\"keyboard-button btn btn-outline-light\" onClick={ () => onClick(value)}>\n      <div className=\"number\">{value.number}</div>\n      <div className=\"letter\">{value.letter}</div>\n    </div>\n  );\n};\n\nexport default KeyboardButton;\n","import { ContactType, KeyboardButtonType } from \"../types/data\";\n\nexport const keyboardButtonData: KeyboardButtonType[] = [\n  { number: '1', letter: ' ' },\n  { number: '2', letter: 'ABC' },\n  { number: '3', letter: 'DEF' },\n  { number: '4', letter: 'GHI' },\n  { number: '5', letter: 'JKL' },\n  { number: '6', letter: 'MNO' },\n  { number: '7', letter: 'PQRS' },\n  { number: '8', letter: 'TUV' },\n  { number: '9', letter: 'WXYZ' },\n];\n\n/**\n * Filter array of contact based on keyword\n *\n * @param {ContactType[]} contacts\n * @param {string} keyword\n *\n * @return ContactType[]\n */\nexport const filterContacts = (contacts: ContactType[], keyword: string): ContactType[] => {\n  let regexString = '';\n\n  for (let i = 0; i < keyword.length; i += 1) {\n    regexString += `[${keyboardButtonData.find((keyBtn) => keyBtn.number === keyword.charAt(i))!.letter}]{1}`\n  }\n  // console.log(regexString);\n\n  const regex = new RegExp(regexString, 'ig');\n\n  return contacts.filter(contact => regex.exec(contact.name.substring(0, keyword.length)) !== null);\n};\n","import React from 'react';\nimport { Row, Col, Input } from 'reactstrap';\n\nimport KeyboardButton from \"./keyboard-button\";\n\nimport { IPhoneKeyboard } from \"../../types/components\";\nimport { KeyboardButtonType } from \"../../types/data\";\n\nimport { keyboardButtonData } from \"../../utils/helpers\";\n\nimport './phone-keyboard.css';\n\nconst keyboardButtonReset: KeyboardButtonType = { letter: 'RESET', number: 'x' };\nconst keyboardButtonDelete: KeyboardButtonType = { letter: 'DELETE', number: '<' };\n\nconst PhoneKeyboard: React.FC<IPhoneKeyboard> = ({ onClick, value }) => {\n  return (\n    <Row>\n      <Col lg=\"12\">\n        <div className=\"phone-keyboard\">\n          <div className=\"keyboard-output\">\n            <Input placeholder=\"keyboard output\" value={value} readOnly={true} className=\"input-keyboard\" />\n          </div>\n          <div className=\"keyboard pt-5\">\n            {\n              keyboardButtonData.map((keyBtn: KeyboardButtonType, index: number) => (\n                <KeyboardButton\n                  key={`key-btn-${index}`}\n                  value={keyBtn}\n                  onClick={onClick}\n                />\n              ))\n            }\n          </div>\n          <div className=\"keyboard-reset\">\n            <KeyboardButton value={keyboardButtonDelete} onClick={onClick}/>\n            <KeyboardButton value={keyboardButtonReset} onClick={onClick}/>\n          </div>\n        </div>\n      </Col>\n    </Row>\n  );\n};\n\nexport default PhoneKeyboard;\n","import React from 'react';\nimport { Row, Col, Badge, ListGroupItem, ListGroup } from 'reactstrap';\n\nimport { IContactList } from \"../../types/components\";\nimport { ContactType } from \"../../types/data\";\n\nimport './contact-list.css';\n\nconst ContactList: React.FC<IContactList> = ({ data }) => {\n  return (\n    <Row>\n      <Col lg=\"12\">\n        <div className=\"contact-list\">\n          <div className=\"contact-list-header d-flex justify-content-between align-items-center mb-4\">\n            <div className=\"font-weight-bold\">Contact list</div>\n            <Badge color=\"success\">{ data.length }</Badge>\n          </div>\n          <div className=\"contact-list-body\">\n            <ListGroup>\n              {\n                data.map((item: ContactType, index: number) => (\n                  <ListGroupItem className=\"d-flex flex-column\" key={`contact-${index}`}>\n                    <span className=\"name\">{ item.name }</span>\n                    <span className=\"number small\">{ item.phone }</span>\n                  </ListGroupItem>\n                ))\n              }\n            </ListGroup>\n          </div>\n        </div>\n      </Col>\n    </Row>\n  );\n};\n\nexport default ContactList;\n","import React, { useState, useEffect } from 'react';\nimport { Col, Row } from \"reactstrap\";\n\nimport PhoneKeyboard from \"./components/PhoneKeyboard\";\nimport ContactList from \"./components/ContactList\";\n\nimport { ContactType, KeyboardButtonType } from \"./types/data\";\nimport * as helpers from './utils/helpers';\n\nimport './App.css';\n\nconst App: React.FC = () => {\n  const [keyboardValue, setKeyboardValue] = useState('');\n  const [contacts, setContacts] = useState([]);\n\n  useEffect(() => {\n    fetch('/contact.json')\n      .then((response: Response) => response.json())\n      .then((data: any) => {\n        // console.log(data);\n        setContacts(data);\n      })\n      .catch((error: any) => {\n      console.error(error);\n    });\n\n  }, []);\n\n  const handleKeyboardClick = (keyboardButton: KeyboardButtonType) => {\n    const { number } = keyboardButton;\n\n    if (number === 'x') {\n      setKeyboardValue('');\n    } else if(number === '<') {\n      setKeyboardValue(keyboardValue.substring(0, keyboardValue.length - 1));\n    } else {\n      setKeyboardValue(`${keyboardValue}${keyboardButton.number}`);\n    }\n  };\n\n  const filterContacts = (contacts: ContactType[], keyword: string): ContactType[] => {\n    if (keyword.length > 0) {\n      return helpers.filterContacts(contacts, keyword);\n    }\n\n    return contacts;\n  };\n\n  return (\n    <div className=\"App\">\n      <Row>\n        <Col lg={{ size: 4, offset: 2 }}>\n          <PhoneKeyboard\n            value={keyboardValue}\n            onClick={ (value: KeyboardButtonType) => handleKeyboardClick(value) }\n          />\n        </Col>\n        <Col lg=\"4\">\n          <ContactList\n            data={filterContacts(contacts, keyboardValue)}\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}